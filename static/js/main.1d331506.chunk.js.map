{"version":3,"sources":["serviceWorker.js","components/UnderConstruction/UnderConstruction.js","components/Dashboard/Dashboard.js","components/StartPage/StartPage.js","App.js","AppRouter.js","index.js"],"names":["Boolean","window","location","hostname","match","UnderConstruction","react","className","React","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userName","regex","StartPage","changeValidation","enabledButton","errorValidation","setState","regexExpression","RegExp","handleChange","bind","assertThisInitialized","handleSubmit","event","eventTargetValue","target","value","regexCheck","validationChecker","length","onViewChange","changeView","preventDefault","labelLength","react_default","a","createElement","TextField_default","error","label","onChange","variant","Button_default","color","size","onClick","disabled","Component","App","_ref","components_Dashboard_Dashboard","components_StartPage_StartPage","viewSwitch","AppRouter","BrowserRouter","Switch_default","Route","exact","path","component","ReactDOM","render","src_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d331506.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\n\n\nexport default class UnderConstruction extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"underConstruction\">\n\t\t\t\t<h2>SITE IS UNDER CONSTRUCTION</h2>\n\t\t\t</div>\n\t\t)\n\t}\n}","import * as React from \"react\";\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userName: this.props.userName\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello {this.state.userName} </h1>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard","import React, {Component} from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport './StartPage.sass'\n\nconst MAX_LENGTH = 10;\nconst regex = '^[a-zA-Z0-9]*$';\n\nclass StartPage extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            enabledButton: false,\n            errorValidation: false\n        };\n\n        this.regexExpression = new RegExp(regex);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        const eventTargetValue = event.target.value;\n        if (this.regexCheck(eventTargetValue)) {\n            this.validationChecker(eventTargetValue.length);\n            this.userName = eventTargetValue;\n        }\n    }\n\n    handleSubmit(event) {\n        this.props.onViewChange({changeView: true, userName: this.userName});\n        event.preventDefault();\n    }\n\n    regexCheck(event) {\n        if (event.match(this.regexExpression)) {\n            if (!this.state.enabledButton) {\n                this.changeValidation(true);\n                return true\n            }\n            else return true\n        }\n        else {\n            this.changeValidation(false, true);\n        }\n    }\n\n    validationChecker(labelLength) {\n        if (labelLength <= MAX_LENGTH)\n            this.changeValidation(true);\n\n        if (labelLength > MAX_LENGTH)\n            this.changeValidation(false,true);\n\n        if (labelLength <= MAX_LENGTH && labelLength > 0 && this.state.errorValidation === true)\n            this.changeValidation(true, false);\n\n        if (labelLength === 0 && this.state.errorValidation === true)\n            this.changeValidation(false, true);\n\n        if (labelLength === 0 && this.state.enabledButton === true)\n            this.changeValidation(false, null);\n    }\n\n    changeValidation = (enabledButton, errorValidation) => {\n        this.setState({\n            enabledButton: enabledButton,\n            errorValidation: errorValidation\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"flex-wrapper\">\n                <header className=\"StartPageHeader\">\n                    <h1>AWESOME BATTLESHIPS</h1>\n                </header>\n                <div className=\"welcomeForm\">\n                    <TextField\n                        error={this.state.errorValidation}\n                        className=\"nameLabel\"\n                        label=\"Your Name\"\n                        onChange={this.handleChange}\n                        variant=\"outlined\"/>\n                    <Button variant=\"contained\" color=\"secondary\" size=\"medium\" className=\"jumpInButton\"\n                            onClick={this.handleSubmit} disabled={!this.state.enabledButton}>\n                        Jump IN\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StartPage","import React from 'react'\nimport './App.sass'\nimport Dashboard from \"./components/Dashboard/Dashboard\"\nimport StartPage from \"./components/StartPage/StartPage\"\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      changeView: false,\n      userName: '',\n    };\n  }\n\n  onViewChange = ({changeView, userName}) => {\n    this.setState({\n      changeView: changeView,\n      userName: userName\n    })\n  };\n\n  viewSwitch(state) {\n    if (state.changeView) {\n      return (<Dashboard userName={state.userName}/>)\n    } else {\n      return (<StartPage onViewChange={this.onViewChange}/>)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.viewSwitch(this.state)}\n      </div>\n    )\n  }\n}","import {BrowserRouter} from 'react-router-dom'\nimport {Route} from 'react-router'\nimport React, {Component} from 'react'\nimport UnderConstruction from './components/UnderConstruction/UnderConstruction'\nimport Switch from \"react-router/Switch\";\nimport App from \"./App\";\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={UnderConstruction}/>\n          <Route path=\"/dev\" component={App}/>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default AppRouter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport AppRouter from \"./AppRouter\"\n\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}